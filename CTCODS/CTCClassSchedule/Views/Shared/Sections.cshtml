@using Ctc.Ods.Types
@using CTCClassSchedule
@using CTCClassSchedule.Common
@using Microsoft.Security.Application
@using MvcMiniProfiler;
@model SectionWithSeats
@{
	MiniProfiler _profiler = MiniProfiler.Current;
	Dictionary<string, string> dict = TempData["DayDictionary"] as Dictionary<string, string>;

	string PreviousSectionID = ViewData["PreviousSectionID"] as string;
	string sectionID = Model.ID.ToString();
	string _searchTerm = Request.QueryString["searchterm"];

	YearQuarter quarterViewing = ViewBag.YearQuarter;
	YearQuarter currentQuarter = ViewBag.CurrentRegistrationQuarter;

	string apiSectionFootnotes = string.Empty;
	foreach (string f in Model.Footnotes)
	{
		if (!string.IsNullOrWhiteSpace(f))
		{
			apiSectionFootnotes = string.Concat(apiSectionFootnotes, " ", f);
		}
	}
	bool firstIteration = true;
}

<!-- SEARCHTERM: @_searchTerm -->
<li class="section-listing"><span class="item-number"><span class="descriptor">Item
	number: </span>@Html.Raw(string.IsNullOrWhiteSpace(_searchTerm) ? Model.ID.ItemNumber : Html.FormatWithSearchTerm(_searchTerm, Model.ID.ItemNumber).ToString())</span>
	<ul class="section-details">
		<li class="section"><span class="descriptor">Section: </span>@Model.SectionCode</li>
		<li class="instructor"><span class="descriptor">Instructors:</span>
			<ul>
				@foreach (OfferedItem item in Model.Offered.OrderBy(o => o.SequenceOrder))
		{
			// instructors
			if (firstIteration && string.IsNullOrWhiteSpace(item.InstructorName))
			{
				<li>Staff</li>
			}
			else
			{
				if (!string.IsNullOrWhiteSpace(item.InstructorName))
				{
					<li><a href="@Helpers.getProfileURL(Convert.ToString(item.InstructorID))">@Html.Raw(string.IsNullOrWhiteSpace(_searchTerm) ? item.InstructorName : Html.FormatWithSearchTerm(_searchTerm, item.InstructorName).ToString())</a></li>
				}
				else
				{
					<li>&nbsp;</li>
				}
			}
			firstIteration = false;
		}
			</ul>
		</li>
		<li><span class="descriptor">Meets: </span>
			<ul class="meets">
				@using (_profiler.Step("Rendering offered items"))
		{
			foreach (OfferedItem item in Model.Offered.OrderBy(o => o.SequenceOrder))
			{
				// meeting times
				<li>
				@if (Model.IsOnline)
			    {

							<span class="days online">
									Online</span>
							<span class="times"><span class="descriptor">&nbsp;</span>&nbsp;</span>
							<span class="room"><span class="descriptor">&nbsp;</span>&nbsp;</span>
			    }
			    else
			    {
							<span class="days">
								<abbr title="@Helpers.getFriendlyDayRange(item.Days, dict)">
                                    @item.Days
                                </abbr>
                            </span>
							<span class="times"><span class="descriptor">at </span>@String.Format("{0:t}", item.StartTime).Replace(" ", "")-@String.Format("{0:t}", item.EndTime).Replace(" ", "")</span>
							<span class="room"><span class="descriptor">in </span>@item.Room</span>
                }
				</li>
            }
        }
			</ul>
		</li>
		@if (sectionID != PreviousSectionID)
		{
			if (Model.Yrq.ID.CompareTo(currentQuarter.ID) >= 0 && Model.SeatsAvailable != int.MinValue)
      {
				<li class="availability" id="availability-@sectionID"><span class="descriptor">Seat
				Availability: </span>
				@if (Model.SeatsAvailable <= 0 || Model.WaitlistCount > 0)
				{
					<strong class="seatsAvailable">class full, @Model.WaitlistCount on waitlist</strong>
					<span class="course-updated"></span>
				}
				else
				{
					<strong class="seatsAvailable">@Model.SeatsAvailable</strong>
					<span class="course-updated"><a id="@sectionID"><span class="ui-icon ui-icon-arrowrefresh-1-e"></span>updated <span class="update-time">@Model.LastUpdated</span></a></span>
				}
				</li>
      }
			 <li class="editing">

				@if (Context.User.Identity.Name.Length > 0 && Helpers.isEditor(Context))
				{
					@Ajax.ActionLink("Edit",
														"SectionEdit",
														"Api",
														new
														{
															itemNumber = Model.ID.ItemNumber.ToString(),
															yrq = Model.ID.YearQuarter.ToString(),
															subject = Model.CourseSubject.ToString(),
															classNum = Model.CourseNumber.ToString()
														},
														new AjaxOptions
														{
															UpdateTargetId = "edit-section",
															HttpMethod = "GET",
															InsertionMode = InsertionMode.Replace,
															OnBegin = "$('#edit-section').dialog('open');",
															OnComplete = "spinner.stop();",
														},
														new { @class = "edit_button" })
				}


		</li>
		<li class="section-notes"><span class="descriptor">Notes: </span>
				<ul>
					<li>
						<span class="label">
							@AutomatedFootnotesConfig.getAutomatedFootnotesText(Model)
			@if (string.IsNullOrWhiteSpace(Model.SectionFootnotes) && string.IsNullOrWhiteSpace(apiSectionFootnotes))
			{
						<!-- no section footnotes found -->
			}
			else
			{
				if (!string.IsNullOrWhiteSpace(apiSectionFootnotes))
				{
							<span id="odsSectionFootnotes">@apiSectionFootnotes</span>
					if (apiSectionFootnotes.IndexOf("prerequisite", StringComparison.OrdinalIgnoreCase) >= 0)
					{
							<a class="footnote-prereq" href="http://bellevuecollege.edu/enrollment/transfer/prerequisites/">How to clear prerequisites?</a>
					}
				}

				if (!string.IsNullOrWhiteSpace(Model.SectionFootnotes))
				{
				string secFootnotes = Model.SectionFootnotes;
							<span id="cmsSectionFootnotes">
					@if (string.IsNullOrWhiteSpace(_searchTerm))
					{
								@secFootnotes;
					}
					else
					{
								@Html.FormatWithSearchTerm(_searchTerm, secFootnotes);
					}
							</span>
				}
			}
						</span> @* span class="label" *@
					</li>

				</ul>
			</li>
	}
	</ul>
</li>
