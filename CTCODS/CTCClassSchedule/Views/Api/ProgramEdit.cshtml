@model CTCClassSchedule.ProgramEditModel

<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>


<script type="text/javascript">
	/* change the title of the dialog box to include the URL value (ALDAC) */
	$(document).ready(function () {
		var url = $("input#itemToUpdate_Abbreviation").val();
		var titleHTML = "Edit Subject Information - " + url;
		$("span.ui-dialog-title").html(titleHTML);

		$("#cancelEdit").click(function (e) {
			e.preventDefault();
			$(".ui-dialog").hide();
			showThrobber();
			window.location.href = $(location).attr('href');
		});

		function showThrobber() {
			var pageHeight = $(document).height();
			$('#overlay').css('height', pageHeight - 49 + 'px');
			$('#overlay').css('margin-top', 49 + 'px');
			$('#overlay').css('opacity', '0.5');
			$('#overlay').css('display', 'inherit');
			$('#lightbox').css('display', 'inherit');
		}


	});



</script>



@using (Html.BeginForm())
{
	bool displayDropdown = false;
    @Html.ValidationSummary(true)
    <fieldset id="ProgramEdit">


        @Html.HiddenFor(model => model.itemToUpdate.Abbreviation)
				@Html.HiddenFor(model => model.itemToUpdate.URL)
				@Html.Hidden("referrer", Request.UrlReferrer.ToString())


				<div class="left">


					<div class="editor-label">
							@Html.LabelFor(model => model.itemToUpdate.Title)
					</div>
					<div class="editor-field">
							@Html.TextBoxFor(model => model.itemToUpdate.Title, new { @class = "SubjectTextfield", @maxlength = "50" })
							@Html.ValidationMessageFor(model => model.itemToUpdate.Title)
					</div>

					 <div class="editor-label">
					 @{
						if (Model.MergedClasses != null)
						{

							if ((Model.MergedClasses.Count() > 0 && Model.itemToUpdate.Abbreviation != Model.itemToUpdate.URL) || Model.MergedClasses.Count() > 1)
							{
								@Html.LabelFor(model => model.itemToUpdate.URL, "Subjects merged with " + Model.itemToUpdate.URL);
							}
							else if (Model.MergedClasses.Count() == 1)
							{
								//if the class is merged to itself, that is fine, but display the dropdown so they can merge it to another class
								string classes = "";
								foreach(string singleClass in Model.MergedClasses){
									classes += singleClass;
								}

								if (classes == Model.itemToUpdate.Abbreviation)
								{
									@Html.LabelFor(model => model.MergeSubjectChoices, "Merge with another subject (choose abbr)");
									displayDropdown = true;
								}

							}
						}
						else
						{
							@Html.LabelFor(model => model.MergeSubjectChoices, "Merge with another subject (choose abbr)");
						}

					}
					</div>
					<div class="editor-field">
						@{
						if (Model.MergedClasses != null)
						{
							if ((Model.MergedClasses.Count() > 0 && Model.itemToUpdate.Abbreviation != Model.itemToUpdate.URL) || Model.MergedClasses.Count() > 1)
							{
								//there are merged subjects. display ajax actionlinks
								foreach (string url in Model.MergedClasses)
								{
									if (url != Model.itemToUpdate.Abbreviation)
									{
										@Ajax.ActionLink(url.Trim(),
											"ProgramEdit",
											"Api",
											new
											{
												Abbreviation = url
											},
											new AjaxOptions
											{
												UpdateTargetId = "edit-program",
												HttpMethod = "GET",
												InsertionMode = InsertionMode.Replace,
												OnBegin = "$('#edit-program').html(' ');",
												OnComplete = "spinner.stop();",
											},
											new { @class = "merged-subject-link" }
										);
									}

								}
							}

							else if (displayDropdown == true)
							{
								//the class is merged with itself. in the app this behavior means that it isn't merged to any class. just display the dropdown.
								@Html.DropDownList("MergeWith", new SelectList(Model.MergeSubjectChoices))
							}
						}

						else{
							//there aren't any merged subjects. display a select list of subjects they can choose to merge with the current subject
								@Html.DropDownList("MergeWith", new SelectList(Model.MergeSubjectChoices))
						}


						}



					</div>


					<div class="editor-label">
							@Html.LabelFor(model => model.itemToUpdate.Intro)
					</div>
					<div class="editor-field">
							 @Html.TextAreaFor(model => Model.itemToUpdate.Intro, new { @class = "SubjectTextarea", @cols = 60, @rows = 7 })
							@Html.ValidationMessageFor(model => model.itemToUpdate.Intro)



					</div>


				</div>

				<div class="right">

					<div class="editor-label">
							@Html.LabelFor(model => model.itemToUpdate.AcademicProgram, "Academic Program (if different than subject)")
					</div>
					<div class="editor-field">
							@Html.TextBoxFor(model => model.itemToUpdate.AcademicProgram, new { @class = "SubjectTextfield", @maxlength = "50" })
							@Html.ValidationMessageFor(model => model.itemToUpdate.AcademicProgram)
					</div>


					<div class="editor-label">
							@Html.LabelFor(model => model.itemToUpdate.ProgramURL, "Academic Program Website")
					</div>
					<div class="editor-field">
							@Html.TextBoxFor(model => model.itemToUpdate.ProgramURL, new { @class = "SubjectTextfield", @maxlength = "255" })
							@Html.ValidationMessageFor(model => model.itemToUpdate.ProgramURL)
					</div>




					<div class="editor-label">
							@Html.LabelFor(model => model.itemToUpdate.Division)
					</div>
					<div class="editor-field">
							@Html.TextBoxFor(model => model.itemToUpdate.Division, new { @class = "SubjectTextfield", @maxlength = "50" })
							@Html.ValidationMessageFor(model => model.itemToUpdate.Division)
					</div>

					<div class="editor-label">
							@Html.LabelFor(model => model.itemToUpdate.DivisionURL)
					</div>
					<div class="editor-field">
							@Html.TextBoxFor(model => model.itemToUpdate.DivisionURL, new { @class = "SubjectTextfield", @maxlength = "50" })
							@Html.ValidationMessageFor(model => model.itemToUpdate.DivisionURL)
					</div>



        </div>
       </fieldset>
	<div id="lastModifiedBy">
				@if (Model.itemToUpdate.LastUpdated != null)
		{
					<text>Last modified by </text>@Model.itemToUpdate.LastUpdatedBy<text> on </text>@Model.itemToUpdate.LastUpdated
		}

				</div>

			 <div class="bottom">
        <p>
            <input type="submit" value="Save" /> <a href="@Request.UrlReferrer.ToString()" id="cancelEdit">Cancel</a>
        </p>
				</div>

}
