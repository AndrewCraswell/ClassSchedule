@model CTCClassSchedule.ProgramEditModel


@using (Html.BeginForm())
{
  @Html.ValidationSummary(true)

	<fieldset id="ProgramEdit">
		@Html.HiddenFor(model => model.ItemToUpdate.Abbreviation)
		@Html.HiddenFor(model => model.ItemToUpdate.URL)
		@Html.Hidden("referrer", (Request != null && Request.UrlReferrer != null) ? Request.UrlReferrer.ToString() : string.Empty)

	<div class="left">
		<div class="editor-label">
		  @Html.LabelFor(model => model.ItemToUpdate.Title)
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.ItemToUpdate.Title, new { @class = "subject-text-field", @maxlength = "50" })
			@Html.ValidationMessageFor(model => model.ItemToUpdate.Title)
		</div>

		<!-- Subject Merging -->
		<div class="editor-label">
			Subjects to merge with @Model.ItemToUpdate.URL
		</div>
		<div class="editor-field">
			<ul class="subject-merger subject-text-field">
				@{
					if (Model.MergedSubjects != null)
					{
						foreach (string url in Model.MergedSubjects)
						{
						<li class="subject-choice">
							<span>@url.Trim()</span>
							<input name="MergeSubjects" value="@url.Trim()" type="hidden" />
							<span class="subject-choice-close ui-icon ui-icon-close"></span>
						</li>
						}
						<li class="subject-new">
							<select id="newSubjectMerge">
								@foreach (string subject in Model.Subjects)
								{
									<option>@subject</option>
								}
							</select>
						</li>
					}
				}
			</ul>
		</div>

		<div class="editor-label">
			@Html.LabelFor(model => model.ItemToUpdate.Intro)
		</div>
		<div class="editor-field">
			@Html.TextAreaFor(model => Model.ItemToUpdate.Intro, new { @class = "subject-text-area", @cols = 60, @rows = 7 })
			@Html.ValidationMessageFor(model => model.ItemToUpdate.Intro)
		</div>
	</div>

	<div class="right">
		<div class="editor-label">
			@Html.LabelFor(model => model.ItemToUpdate.AcademicProgram, "Academic Program (if different than subject)")
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.ItemToUpdate.AcademicProgram, new { @class = "subject-text-field", @maxlength = "50" })
			@Html.ValidationMessageFor(model => model.ItemToUpdate.AcademicProgram)
		</div>

		<div class="editor-label">
			@Html.LabelFor(model => model.ItemToUpdate.ProgramURL, "Academic Program Website")
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.ItemToUpdate.ProgramURL, new { @class = "subject-text-field", @maxlength = "255" })
			@Html.ValidationMessageFor(model => model.ItemToUpdate.ProgramURL)
		</div>

		<div class="editor-label">
			@Html.LabelFor(model => model.ItemToUpdate.Division)
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.ItemToUpdate.Division, new { @class = "subject-text-field", @maxlength = "50" })
			@Html.ValidationMessageFor(model => model.ItemToUpdate.Division)
		</div>

		<div class="editor-label">
			@Html.LabelFor(model => model.ItemToUpdate.DivisionURL)
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(model => model.ItemToUpdate.DivisionURL, new { @maxlength = "50" })
			@Html.ValidationMessageFor(model => model.ItemToUpdate.DivisionURL)
		</div>
  </div>
	</fieldset>

<div id="lastModifiedBy">
	@if (Model.ItemToUpdate.LastUpdated != null)
	{
		<text>Last modified by </text>@Model.ItemToUpdate.LastUpdatedBy<text> on </text>@Model.ItemToUpdate.LastUpdated
	}
</div>

<div class="bottom">
	<p>
		<input type="submit" value="Save" /> <a href="@Request.UrlReferrer.ToString()" id="cancelEdit">Cancel</a>
	</p>
</div>

}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">
	/* change the title of the dialog box to include the URL value (ex. ALDAC) */
	$(function () {
		var url = $("input#ItemToUpdate_Abbreviation").val();
		var titleHTML = "Edit Subject Information - " + url;
		$("span.ui-dialog-title").html(titleHTML);

		$("#cancelEdit").click(function (e) {
			e.preventDefault();
			$(".ui-dialog").hide();
			showThrobber();
			window.location.href = $(location).attr('href');
		});

		// Delete subject merge choices
		$('.subject-merger').on('click', '.subject-choice-close', function () {
			subjectToRemove = $(this).parent();

			// Add option back into the drop down list alphabetically
			$('#newSubjectMerge').children().each(function () {
				if ($(this).text() > $(subjectToRemove).text()) {
					var subjectToAdd = '<option>' + $(subjectToRemove).text() + '</option>';
					$(subjectToAdd).insertBefore($(this));
					return false;
				}
			});

			// Remove the subject from the list of selected
			$(subjectToRemove).remove();
		});

		// Allow user to select subjects to merge
		$('#newSubjectMerge').change(function () {
			var selectedSubject = $(this).find(':selected');

			if ($('#newSubjectMerge').prop('selectedIndex') > 0) {
				var optionToAdd = '<li class="subject-choice"><span>' + selectedSubject.text() + '</span><input name="mergeSubjects" value="' + selectedSubject.text() + '" type="hidden"><span class="subject-choice-close ui-icon ui-icon-close"></span></li>';
				$(optionToAdd).insertBefore($(this).parent());
				selectedSubject.remove();
				$('#newSubjectMerge').prop('selectedIndex', 0);
			}
		});
	});
</script>