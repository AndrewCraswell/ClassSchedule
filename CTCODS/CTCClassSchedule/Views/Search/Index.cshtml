@using Ctc.Ods.Types;
@using CTCClassSchedule;
@using CTCClassSchedule.Common;
@using MvcMiniProfiler;
@using System.Text.RegularExpressions;
@using System.Globalization;
@using Microsoft.Security.Application
@model CTCClassSchedule.SearchResultsModel

@{
	MiniProfiler _profiler = MiniProfiler.Current;

	YearQuarter currentQuarter = ViewBag.CurrentYearQuarter;
	// NOTE: we should always have a YearQuarter (searching all quarters is not an option)
	YearQuarter yrq = ViewBag.YearQuarter;	// this is the YRQ being searched

	int itemCount = ViewBag.ItemCount ?? 0;
	int _courseCount = ViewBag.CourseCount ?? 0;
	String classDesc = _courseCount == 1 ? "class" : "classes";
	String sectionDesc = itemCount == 1 ? "section" : "sections";

	IDictionary<string, object> _routeValues = ViewBag.RouteValues;
	_routeValues["YearQuarterID"] = "All";
	// Define a place to remember SectionIDs
	if (!ViewData.Keys.Contains("PreviousSectionID"))
	{
		ViewData.Add("PreviousSectionID", string.Empty);
	}

	string PreviousCourseID = string.Empty;
	string PreviousSectionID = string.Empty;
	string PreviousCourseTitle = string.Empty;

	string _searchTerm = ViewBag.searchterm;
}
<script type="text/javascript" src="@Url.Content("~/Scripts/CtcClassSchedule.js")"></script>
<div id="scheduleMain" class="page-search">
    @Html.Partial("quarterNavigation")
    <div id="container" class="sidebar">
        <div id="sidebar">
            @Html.Partial("advancedFacetedSearch", Model.Subjects)
        </div> <!-- #sidebar -->

        <div id="content">

	@if (itemCount == 0)
 {
			<h1 id="pageTitle">No classes were found for &quot;@_searchTerm&quot;</h1>
			<div id="error-noclassesfound">
            <p><strong>TIP:</strong> Try searching for something else, or selecting fewer <em>Refine</em> options to the left.</p>
			</div>
 }
 else
 {
	<div id="searchHeaderInfo">
		<h1 id="searchResultsMsg">
			<strong>&quot;@_searchTerm&quot;</strong> found @itemCount @sectionDesc in @_courseCount @classDesc for @(yrq != null ? yrq.FriendlyName : "ERROR: Unknown quarter")
		</h1>
		<div id="searchPageNum">

		@if (ViewBag.TotalPages > 0)
		{
			<text>page @ViewBag.CurrentPage of @ViewBag.TotalPages</text>
		}
		</div>
	</div>
	 using (_profiler.Step("Rendering sections from search results"))
	 {
			IEnumerable<SectionWithSeats> linkedSections;
			bool hasLinked;

		 foreach (SectionWithSeats sec in Model.Section.OrderBy(s => Model.Section.Any(l => l.IsLinked && l.Yrq.ID == s.Yrq.ID && l.LinkedTo.Trim() == s.ID.ItemNumber)))
		 {
			// ensure we don't have any bleed-over of data
			linkedSections = null;
			hasLinked = false;

			 string courseID = sec.CourseID;
			 string sectionID = sec.ID.ToString();
			 string courseTitle = sec.CourseTitle;

			 if(!sec.IsLinked)
			 {
				linkedSections = Model.Section.Where(s => s.IsLinked && s.Yrq.ID == sec.Yrq.ID && s.LinkedTo.Trim() == sec.ID.ItemNumber);
				hasLinked = linkedSections.Count() > 0;

			 if (PreviousCourseID != courseID || courseTitle != PreviousCourseTitle || (courseID == PreviousCourseID && courseTitle == PreviousCourseTitle && hasLinked))
			 {

				 _routeValues["Subject"] = sec.IsCommonCourse == true ? sec.CourseSubject.Trim() + "&" : sec.CourseSubject.Trim();
				 _routeValues["ClassNum"] = sec.CourseNumber;
				 if (courseID != PreviousCourseID && PreviousCourseID != "")
				 {
				@:</ul>
			 }
				<text>
		<h2 class="classHeading">
			<a href="@Url.Action("ClassDetails", "Classes", new RouteValueDictionary(_routeValues))">
				@Html.FormatWithSearchTerm(_searchTerm, "{0}{1} {2} {3}", sec.CourseSubject, sec.IsCommonCourse ? "&" : string.Empty, sec.CourseNumber, sec.CourseTitle)
			</a>
			<span class="classCredits">&#8226;
			@if (sec.IsVariableCredits)
		{
							@:V1-@Html.CreditsValue(sec.Credits)
								<abbr title="variable credits">Cr.</abbr>

		}
		else
		{
							@Html.CreditsValue(sec.Credits)
								<abbr title="credit(s)">Cr.</abbr>

		}
				</span>
				@if (linkedSections != null)
		{
				foreach (SectionWithSeats linkedSec in linkedSections)
				{
			<br/>
			<a href="@Url.Action("ClassDetails", "Classes", new { YearQuarterID = "All", Subject = linkedSec.CourseSubject.Trim(), ClassNum = linkedSec.CourseNumber })">
				@Html.Raw(string.Format("{0}{1} {2} {3}", linkedSec.CourseSubject, linkedSec.IsCommonCourse ? "&" : string.Empty, linkedSec.CourseNumber, linkedSec.CourseTitle))
			</a>
			<span class="classCredits">&#8226;
			@if (linkedSec.IsVariableCredits)
		{
							@:V1-@Html.CreditsValue(linkedSec.Credits)
								<abbr title="variable credits">Cr.</abbr>

		}
		else
		{
							@Html.CreditsValue(linkedSec.Credits)
								<abbr title="credit(s)">Cr.</abbr>

		}
				</span>
				}
		}
		</h2>

		<p class="classDescription">
		@if (sec.CustomTitle != null && sec.CustomTitle != string.Empty)
		{
			@Html.Raw(Html.FormatWithSearchTerm(_searchTerm, sec.CustomDescription).ToString())
		}
		else {
			@Html.Raw(sec.CourseDescriptions.Count() == 0 ? "" : Html.FormatWithSearchTerm(_searchTerm, sec.CourseDescriptions[0].Description).ToString())
		}


		</p>

		<p class="classNotes">
				@Html.Raw(sec.CourseFootnotes == null ? "" : Html.FormatWithSearchTerm(_searchTerm, Encoder.HtmlEncode(sec.CourseFootnotes)).ToString())
				@if (sec.CourseDescriptions.Count() > 0)
		{
			if (sec.CourseDescriptions[0].Description.IndexOf("prerequisite", StringComparison.OrdinalIgnoreCase) >= 0)
			{
										<a class="footnote-prereq" href="http://bellevuecollege.edu/enrollment/transfer/prerequisites/entrycode/">How to clear prerequisites?</a>
			}
		}
		</p>
		<p class="classDetails">
			@Html.ActionLink("View Class Details", "ClassDetails", "Classes", new RouteValueDictionary(_routeValues), null)
		</p>
		<ul class='course-block @(yrq.ID.CompareTo(currentQuarter.ID) < 0 ? Html.Raw("course-block-past-quarter") : Html.Raw(string.Empty))'>
		</text>
			 }

			 if (sectionID != PreviousSectionID)
			 {
				 //multipleSections includes a master and its subordinate linked section(s).
				 List<SectionWithSeats> multipleSections = new List<SectionWithSeats>();
				 multipleSections.Add(sec);
				 foreach (SectionWithSeats linkedSec in linkedSections)
				 {
					 multipleSections.Add(linkedSec);
				 }

				 // NOTE: We must pass the current ViewData object to RenderPartial here.
				 // If we pass a new ViewDataDictionary it blows away all our ViewBag properties.
				 ViewData["PreviousSectionID"] = PreviousSectionID;
				 Html.RenderPartial("Sections", multipleSections, ViewData);
			 }
			 } @* end sec.IsLInked *@

			 PreviousSectionID = sectionID;
			 PreviousCourseID = courseID;
			 PreviousCourseTitle = sec.CourseTitle;

		 } @* end foreach(sec) *@
	 }
 }



    @if (ViewBag.TotalPages <= 1 && Model.SearchResultNoSection.Count() > 0)
		{
			Html.RenderPartial("NoSectionCourses", Model.SearchResultNoSection);
		}

	@{Html.RenderPartial("Pager");}

    </div> <!-- #content -->
    </div> <!-- #container -->
</div>
