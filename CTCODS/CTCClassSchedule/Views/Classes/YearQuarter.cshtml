@model IEnumerable<Ctc.Ods.Types.CoursePrefix>

@{
    ViewBag.Title = "Index";
}

<div id="scheduleMain">


@Html.Partial("quarterNavigation")

@Html.Partial("advancedFacetedSearch")


<div id="scheduleContent">

		@if (ViewBag.ErrorMsg.Length > 0) {
			@Html.Partial("ErrorMsg")
		}


		<h2>@ViewBag.YearQuarterHP Credit Classes (@ViewBag.WhichClasses)</h2>

		@Html.Partial("a_to_z")

		<p>
				@*Html.ActionLink("Create New", "Create") *@
		</p>



	@if (ViewBag.whichclasses != "All")
 {

 }

		@foreach (var item in Model)
	{

		@*  if there is a break between the characters, e.g. from J to M,
				make sure the alphabet array is updated and incremented.
		*@

		while ((char)(ViewBag.AlphabetCharacter + 65) < Convert.ToChar(item.Subject.Substring(0, 1))) {
			ViewBag.AlphabetArray[ViewBag.AlphabetCharacter] = true;
			ViewBag.AlphabetCharacter++;
		}


		@*
			Check if the array is in bound (less than 26 letters in alphabet).
			Check if the boolean value in the alphabet array is false (means that letter hasn't been printed yet)
			Check if the current letter is the same as the first letter of the current title
			If so, then display a letter, otherwise skip, as this is the same letter title as before and we only
			want a single letter printed per grouping of like titles.

		 *@

		if (ViewBag.AlphabetCharacter <= 25 && ViewBag.AlphabetArray[ViewBag.AlphabetCharacter] == false && (char)(ViewBag.AlphabetCharacter + 65) == Convert.ToChar(item.Subject.Substring(0, 1)))
		{
			<h2>@((char)(ViewBag.AlphabetCharacter + 65))</h2>

	 ViewBag.AlphabetArray[ViewBag.AlphabetCharacter] = true;
	 ViewBag.AlphabetCharacter++;
		}

			<div class="subject">
				<a href="/Classes/All/@item.Subject/">@Html.DisplayFor(modelItem => item.Title)</a>
			</div>
		}

		</table>

	</div>
</div>