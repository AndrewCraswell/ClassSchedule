@using CTCClassSchedule;
@using CTCClassSchedule.Common;
@using MvcMiniProfiler;
@using Ctc.Ods.Types;
@model IEnumerable<CTCClassSchedule.SectionWithSeats>

@{
	MiniProfiler _profiler = MiniProfiler.Current;

	ViewBag.PageTitle = ViewBag.Subject + " " + @ViewBag.ClassNum + " at Bellevue College";

	Course course = (Course)ViewBag.CourseInfo;
	IList<YearQuarter> yrqList = (ViewBag.QuarterNavMenu as IList<YearQuarter>);
	YearQuarter currentYrq = yrqList[0];
	string currentYrqID = currentYrq.ID;
	YearQuarter activeQuarter = ViewBag.CurrentYearQuarter;

	string PreviousYrq = string.Empty;
	string PreviousSectionID = string.Empty;
}

<script type="text/javascript" src="@Url.Content("~/Scripts/CtcClassSchedule.js")"></script>


<script type="text/javascript">
	/* subject chooser pop-up dialog */
	$(document).ready(function () {

		$("#edit-section").dialog({
			autoOpen: false,
			height: 400,
			width: 500,
		});
	});
</script>

	<div title="Edit Section" id="edit-section"></div>

<div id="scheduleMain">
	@Html.Partial("quarterNavigation")
	<div id="container" class="nosidebar">
        <div id="content">
				@if (course != null)
		{
            <h1 id="pageTitle">
                <span class="courseID">@(string.Format("{0}{1} {2}", course.Subject, course.IsCommonCourse ? "&" : string.Empty, course.Number))</span>
				<span>@course.Title</span>

				@*
				// TODO: Display any upcoming course title change, if detected
				*@

				&#8226;
				@if (course.IsVariableCredits)
		{
							<span class="classCredits">
								V1-@Html.CreditsValue(course.Credits)
									<abbr title=" variable credit(s) ">Cr.</abbr>
							</span>
		}
		else
		{
							<span class="classCredits">
								@Html.CreditsValue(course.Credits)
									<abbr title=" credit(s) ">Cr.</abbr>
							</span>
		}
            </h1>

             <div class="aside">
				@if (!string.IsNullOrWhiteSpace(ViewBag.ProgramUrl))
		{
                    <div id="programWebsite">
                        <h2>Department</h2>
			            <p><a href="@ViewBag.ProgramUrl" class="programWebsite">@course.Subject</a></p>
		            </div>
		}
            </div><!-- aside -->


            <div id="class-details">
                <div id="courseDescription">
				    <h2>Description:</h2>
                    <p>
										@{
		IList<CourseDescription> descriptions = course.Descriptions.ToList();
										}
										@(descriptions.Count <= 0 || string.IsNullOrWhiteSpace(descriptions[0].Description) ? "* NO DESCRIPTION FOUND *" : descriptions[0].Description)
			        </p>
                </div>

					@if (descriptions.Count > 1)
		 {
			 <div id="courseDescriptionUpcoming">
				<h3>New description starting @descriptions[1].YearQuarterBegin.FriendlyName</h3>
				<p>
					@(string.IsNullOrWhiteSpace(descriptions[1].Description) ? "* NO DESCRIPTION FOUND*" : descriptions[1].Description)
				</p>
			 </div>
		 }

			    <div id="courseFootnotes">
				    <h2>Details:</h2>
               <p>
									@Model.First().CourseFootnotes
									@if (descriptions[0].Description.IndexOf("prerequisite", StringComparison.OrdinalIgnoreCase) >= 0 || Model.First().CourseFootnotes.IndexOf("prerequisite", StringComparison.OrdinalIgnoreCase) >= 0)
				 {
										<a class="footnote-prereq" href="http://bellevuecollege.edu/enrollment/transfer/prerequisites/">How to clear prerequisites?</a>
				 }
			        </p>
          </div>

		    @if (!string.IsNullOrWhiteSpace(ViewBag.CourseOutcome))
			{
			    <div id="courseOutcome">
				    <h2>Outcomes:</h2>
                    <!-- <p>After completing this course, students should be able to:</p>-->
				    @Html.Raw(ViewBag.CourseOutcome)
			    </div>
			}

            </div> <!-- class-details -->
            <div id="allSectionsbyQuarter">

				@using (_profiler.Step("Rendering sections by YRQ"))
		{
			bool isPastQuarter = false;
			var yrqs = (from s in Model
									where s.Yrq.ID.CompareTo(currentYrqID) <= 0
									orderby s.Yrq.ID descending
									group s by s.Yrq.FriendlyName into g
									select new
									{
										YRQ = g.Key
										 ,
										Sections = g.Count()
									}).Take(4);

			<div class="offeredQuarters">
				<h2>Offered on:</h2>
				<ul>
				@foreach (var y in yrqs)
		{
			if (y.Sections > 0)
			{
					<li class="@(isPastQuarter ? "offeredPastQuarter" : "offeredFutureOrPresentQuarter")">
						@Html.ActionLink(y.YRQ, "YearQuarterSubject", new { YearQuarter = y.YRQ, Subject = course.Subject })
						@if (activeQuarter.FriendlyName.CompareTo(y.YRQ) == 0)
			{
							<span>(current quarter)</span>
				isPastQuarter = true; // for next iteration
			}
					</li>
			}
		}
				</ul>
			</div> <!-- offeredQuarters -->
		}
	    </div> <!-- allSectionsbyQuarter -->

		}
		else
		{
		 string subject = ViewContext.RouteData.Values["Subject"].ToString();
		 string number = ViewContext.RouteData.Values["ClassNum"].ToString();
				<h1>Sorry, we don't appear to have any courses with the ID &quot;@string.Format("{0} {1}", subject, number)&quot;</h1>
		}
    </div> <!-- content -->

    </div> <!-- container -->
</div>
