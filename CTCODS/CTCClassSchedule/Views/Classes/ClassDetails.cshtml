@using CTCClassSchedule;
@using CTCClassSchedule.Common;
@using MvcMiniProfiler;
@using Ctc.Ods.Types;
@model IEnumerable<CTCClassSchedule.SectionWithSeats>

@{
	MiniProfiler _profiler = MiniProfiler.Current;

	ViewBag.PageTitle = ViewBag.Subject + " " + @ViewBag.ClassNum + " at Bellevue College";

	Course course = (Course)ViewBag.CourseInfo;
	IList<YearQuarter> yrqList = (ViewBag.QuarterNavMenu as IList<YearQuarter>);
	string currentYrq = yrqList[0].ID;

	string PreviousYrq = string.Empty;
	string PreviousSectionID = string.Empty;
}

<script type="text/javascript" src="@Url.Content("~/Scripts/CtcClassSchedule.js")"></script>


<script type="text/javascript">
	/* subject chooser pop-up dialog */
	$(document).ready(function () {

		$("#edit-section").dialog({
			autoOpen: false,
			height: 400,
			width: 500,
		});
	});
</script>

	<div title="Edit Section" id="edit-section"></div>

<div id="scheduleMain">
	@Html.Partial("quarterNavigation")
	<div id="container" class="nosidebar">
        <div id="content">
            <h1 id="pageTitle">
                <span class="courseID">@(string.Format("{0}{1} {2}", course.Subject, course.IsCommonCourse ? "&" : string.Empty, course.Number))</span>
				<span>@course.Title</span>

				@*
				// TODO: Display any upcoming course title change, if detected
				*@

				&#8226;
				@if (course.IsVariableCredits)
				{
							<span class="classCredits">
								V1-@Html.CreditsValue(course.Credits)
									<abbr title=" variable credit(s) ">Cr.</abbr>
							</span>
				}
				else
				{
							<span class="classCredits">
								@Html.CreditsValue(course.Credits)
									<abbr title=" credit(s) ">Cr.</abbr>
							</span>
				}
            </h1>

             <div class="aside">
				@if (!string.IsNullOrWhiteSpace(ViewBag.ProgramUrl))
                {
                    <div id="programWebsite">
                        <h2>Department</h2>
			            <p><a href="@ViewBag.ProgramUrl" class="programWebsite">@course.Subject</a></p>
		            </div>
		        }
            </div><!-- aside -->


            <div id="class-details">
                <div id="courseDescription">
				    <h2>Description:</h2>
                    <p>
										@{
											IList<CourseDescription> descriptions = course.Descriptions.ToList();
											Html.Encode(descriptions.Count <= 0 || string.IsNullOrWhiteSpace(descriptions[0].Description) ? "* NO DESCRIPTION FOUND *" : descriptions[0].Description);
										}
			        </p>
                </div>

					@if (descriptions.Count > 1)
		 {
			 <div id="courseDescriptionUpcoming">
				<h3>New description starting @descriptions[1].YearQuarterBegin.FriendlyName</h3>
				<p>
					@(string.IsNullOrWhiteSpace(descriptions[1].Description) ? "* NO DESCRIPTION FOUND*" : descriptions[1].Description)
				</p>
			 </div>
		 }

			    <div id="courseFootnotes">
				    <h2>Details:</h2>
               <p>
									@Model.First().CourseFootnotes
									@if (descriptions[0].Description.IndexOf("prerequisite", StringComparison.OrdinalIgnoreCase) >= 0 || Model.First().CourseFootnotes.IndexOf("prerequisite", StringComparison.OrdinalIgnoreCase) >= 0)
									{
										<a class="footnote-prereq" href="http://bellevuecollege.edu/enrollment/transfer/prerequisites/">How to clear prerequisites?</a>
									}
			        </p>
          </div>

		    @if (!string.IsNullOrWhiteSpace(ViewBag.CourseOutcome))
		    {
			    <div id="courseOutcome">
				    <h2>Outcomes:</h2>
                    <!-- <p>After completing this course, students should be able to:</p>-->
				    @Html.Raw(ViewBag.CourseOutcome)
			    </div>
		    }

            </div> <!-- class-details -->
            <div id="allSectionsbyQuarter">

				@using (_profiler.Step("Rendering sections by YRQ"))
		{
			var yrqs = (from s in Model
															where s.Yrq.ID.CompareTo(currentYrq) >= 0
															group s by s.Yrq.FriendlyName into g
															select new {
																						YRQ = g.Key
																						,Sections = g.Count()
																					}).Take(4);

			<div>
				<h2>Offered on</h2>
				<ul>
				@foreach (var y in yrqs.OrderBy(q => q.YRQ))
		{
			if (y.Sections > 0)
			{
					<li>@y.YRQ</li>
			}
		}
				</ul>
			</div>
@*
// The block of code below is being replaced by the aggregate display above. - 2/07/2012, shawn.south@bellevuecollege.edu

			foreach (SectionWithSeats sec in Model)
			{
				string thisYrq = sec.Yrq.ID;
				string sectionID = sec.ID.ToString();

				if (!sec.IsLinked)
				{
					if (thisYrq != PreviousYrq)
					{
						if (PreviousYrq != string.Empty)
						{
						@: </ul>
					}


					<text>
			        <h2 class="course-YRQ@(currentYrq != thisYrq ? Html.Raw(" course-YRQ-past-quarter") : Html.Raw(string.Empty))">@sec.Yrq.FriendlyName</h2>
			        <div class="YRQClassTitle">
					    @Html.Raw(string.Format("{0}{1} {2} - {3}", sec.CourseSubject, sec.IsCommonCourse ? "&amp;" : string.Empty, sec.CourseNumber, sec.CourseTitle))

							&#8226;
							@if (sec.IsVariableCredits)
							{
										<span class="classCredits">
											V1-@Html.CreditsValue(sec.Credits)
												<abbr title=" variable credit(s) ">Cr.</abbr>
										</span>
							}
							else
							{
										<span class="classCredits">
											@Html.CreditsValue(sec.Credits)
												<abbr title=" credit(s) ">Cr.</abbr>
										</span>
							}
				    </div>

				    <ul class="course-block@(currentYrq != thisYrq ? Html.Raw(" course-block-past-quarter") : Html.Raw(string.Empty))">
				    </text>
					}

					if (sectionID != PreviousSectionID)
					{
						Html.RenderPartial("Sections", sec, new ViewDataDictionary { { "PreviousSectionID", PreviousSectionID } });
					}
				}
				PreviousSectionID = sectionID;
				PreviousYrq = thisYrq;
			}
*@




		}
	    </div> <!-- allSectionsbyQuarter -->

    </div> <!-- content -->

    </div> <!-- container -->
</div>
