@using CTCClassSchedule
@using CTCClassSchedule.Common
@using CTCClassSchedule.Controllers
@using MvcMiniProfiler;
@using Ctc.Ods.Types
@model IList<CTCClassSchedule.SectionsBlock>
@{
	MiniProfiler _profiler = MiniProfiler.Current;

	IDictionary<string, object> _routeValues = ViewBag.RouteValues;
	_routeValues["YearQuarterID"] = "All";
	_routeValues["Subject"] = Model.Count() > 0 ? Model.First().Sections.First().CourseSubject.Trim() : null;
	RouteValueDictionary route = new RouteValueDictionary(_routeValues);


	string courseID = string.Empty;
	string sectionID = string.Empty;
	string CourseTitle = string.Empty;

	string FriendlyYRQ = string.Empty;
	string thisYrq = string.Empty;

	// Get the navigation list and other quarter information
	string currentYrq = ViewBag.CurrentYearQuarter.ID;

	if (ViewBag.YearQuarter != null)
	{
		YearQuarter yrq = ViewBag.YearQuarter;
		thisYrq = yrq.ID;
		FriendlyYRQ = yrq.FriendlyName;
	}

	ViewBag.PageTitle = FriendlyYRQ + " " + ViewBag.ProgramTitle + " Credit Class Schedule at Bellevue College";

}
<div id="scheduleMain">
	@{
		Html.RenderPartial("quarterNavigation");
	}
	<div id="container" class="sidebar">
		<p id="sectionTitle">
			<a href="@Url.Action("YearQuarter", "Classes")">@FriendlyYRQ</a></p>
		<div id="sidebar">
			@{
				Html.RenderPartial("advancedFacetedSearch");
			}
		</div>
		<!-- #sidebar -->
		<div id="content">
			@if (Model.Count == 0)
	 {
		 string subject = ViewContext.RouteData.Values["Subject"].ToString();
				<h1 id="pageTitle">
					No @subject classes were found</h1>
				<div id="error-noclassesfound">
					<strong>TIP:</strong>
					@Html.Partial("subjectNavigation") or try selecting fewer <em>Refine</em> options
					to the left.
				</div>
	 }
	 else
	 {

				<h1 id="pageTitle">
					@ViewBag.ProgramTitle
				</h1>



		 if (!string.IsNullOrWhiteSpace(ViewBag.SubjectIntro))
		 {
				<p class="subjectdesc">@ViewBag.SubjectIntro</p>
		 }

		 if (!string.IsNullOrWhiteSpace(ViewBag.ProgramUrl))
		 {
				<p id="programLink">
					<strong>Need more info?</strong> <a href="@ViewBag.ProgramUrl">Visit the
						@if (!string.IsNullOrWhiteSpace(ViewBag.AcademicProgram))
						{
							@ViewBag.AcademicProgram
						}
						else if (!string.IsNullOrWhiteSpace(ViewBag.ProgramTitle))
						{
							@ViewBag.ProgramTitle
						}
						else
						{
							<text>Program</text>
						}
						website</a>
				</p>
		 }

		 if (Helpers.isAdmin(Context))
		 {

				<div class="message">@Context.User.Identity.Name! You have admin access to this section.</div>
		 }
		 else if (Helpers.isEditor(Context))
		 {
				<div class="message">@Context.User.Identity.Name! You have editor access to this section.</div>
		 }

		 using (_profiler.Step("Rendering Sections by Course (outer loop)"))
		 {
			 foreach (SectionsBlock block in Model)
			 {
				 SectionWithSeats firstSection = block.Sections.First();

				 if (firstSection != null)
				 {
					 if (!firstSection.IsLinked)
					 {
						 route["Subject"] = Helpers.SubjectWithCommonCourseFlag(firstSection);
						 route["ClassNum"] = firstSection.CourseNumber;

				<h2 class="classHeading">
					@if (block.LinkedSections.Count > 0)
					{
						<span class="combinationClass">Combination class:</span><br />
					}
					<a href="@Url.Action("ClassDetails", "Classes", route)">
						@Html.SectionCourseHeading(firstSection)
						@ViewHelpers.DisplayCredits(firstSection)
					</a>
					@{
						 IList<SectionWithSeats> commonLinkedSections = ClassesController.ParseCommonHeadingLinkedSections(block.LinkedSections);
					}
						 @foreach (SectionWithSeats linkedSec in commonLinkedSections)
						 {
						<br />
						<a href="@Url.Action("ClassDetails", "Classes", new { YearQuarterID = "All", Subject = linkedSec.CourseSubject.Trim(), ClassNum = linkedSec.CourseNumber })">
							@Html.SectionCourseHeading(linkedSec)
							@ViewHelpers.DisplayCredits(linkedSec)
						</a>
							}
				</h2> @* classHeading *@
				<div class="classInfo">
					@if (Helpers.isAdmin(Context))
					{
							 @Ajax.ActionLink("Edit",
																"ClassEdit",
																"Api",
																new
																{
																	CourseNumber = firstSection.CourseNumber,
																	Subject = firstSection.CourseSubject,
																	IsCommonCourse = firstSection.IsCommonCourse,
																},
																new AjaxOptions
																{
																	UpdateTargetId = "edit-class",
																	HttpMethod = "GET",
																	InsertionMode = InsertionMode.Replace,
																	OnBegin = "$('#edit-class').dialog('open');",
																	OnComplete = "spinner.stop();",
																},
																new { @class = "edit_button" })

					}
					<div class="classDetails">
						@if (!string.IsNullOrWhiteSpace(firstSection.CustomTitle))
						{
							// NOTE: do not display HP description from this page
							@Html.Raw(firstSection.CustomDescription)
						}
						<ul>
							<li class="classDetailsLink">
								@Html.ActionLink(String.Concat("View ", Helpers.SubjectWithCommonCourseFlag(firstSection), " ", firstSection.CourseNumber, " details"), "ClassDetails", "Classes", route, null)
							</li>
							@foreach (SectionWithSeats linkedSec in commonLinkedSections)
							{
								<li class="classDetailsLink">
									@Html.ActionLink(String.Concat("View ", Helpers.SubjectWithCommonCourseFlag(linkedSec), " ", linkedSec.CourseNumber, " details"), "ClassDetails", "Classes", new { YearQuarterID = "All", Subject = linkedSec.CourseSubject.Trim(), ClassNum = linkedSec.CourseNumber }, null)
								</li>
							}
						</ul>
					</div>
					<p class="classNotes">
						@{
								// save footnotes to pass to sub-view
								ViewData["CourseFootnotes"] = block.CommonFootnotes;
						}
						@ViewHelpers.DisplayFootnotes(block.CommonFootnotes, firstSection.CourseFootnotes)
					</p>
				</div> <!--classInfo -->
				<ul class='course-block @(thisYrq.CompareTo(currentYrq) < 0 ? Html.Raw("course-block-past-quarter") : Html.Raw(string.Empty))'>
					@{
						 foreach (SectionWithSeats sec in block.Sections)
						 {

							 //bothSections includes a master and its subordinate linked section(s)
							 IEnumerable<SectionWithSeats> multipleSections = new List<SectionWithSeats>() { sec };
							 IList<SectionWithSeats> linked = block.LinkedSections.Where(l => l.LinkedTo == sec.ID.ItemNumber).ToList();

							 if (linked.Count > 0)
							 {
								 multipleSections = multipleSections.Union(linked).ToList();
							 }

							 // NOTE: We must pass the current ViewData object to RenderPartial here.
							 // If we pass a new ViewDataDictionary it blows away all our ViewBag properties.
							 Html.RenderPartial("Sections", multipleSections, ViewData);
						 }
					}
				</ul>
					 } @* !sec.IsLinked *@
				 }
			 }
		 }
	 }
			<div title="Edit Section" id="edit-section">
			</div>
			<div title="Edit Class" id="edit-class">
			</div>
		</div>
		<!-- content -->
	</div>
	<!-- container -->
</div>
<!-- #scheduleMain -->
@section PageScripts
{
	<script type="text/javascript" src="@Url.Content("~/Scripts/CtcClassSchedule.js")"></script>
	<script type="text/javascript">

	/* subject chooser pop-up dialog */
	$(document).ready(function () {

		$("#edit-section").dialog({
			autoOpen: false,
			height: 575,
			width: 650
		});

		$("#edit-class").dialog({
			autoOpen: false,
			height: 425,
			width: 600
		});

		$("span.ui-icon-closethick").click(function () {
			showThrobber();
			window.location.href = $(location).attr('href');
		});

			@if (Helpers.isEditor(Context))
			{

				<text>
				$('li.section-listing').hover(
					function () {
						$(this).children('ul.section-details').children('li.editing').children('a.edit_button').show();
						$(this).addClass('section-listing-edit edit-hover');
					},
					function () {
						$(this).children('ul.section-details').children('li.editing').children('a.edit_button').hide();
						$(this).removeClass('section-listing-edit edit-hover');
				});
				</text>
			}


			@if (Helpers.isAdmin(Context))
			{
				<text>
				$('.classInfo').hover(
					function () {
						$(this).children('a.edit_button').show();
						$(this).addClass('edit-hover classInfo-edit');
					},
					function () {
						$(this).children('a.edit_button').hide();
						$(this).removeClass('edit-hover classInfo-edit');
				});
				</text>
			}

	});
	</script>
}
