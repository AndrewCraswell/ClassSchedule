@using CTCClassSchedule.Models
@model CTCClassSchedule.ProgramEditModel


@using (Html.BeginForm())
{
  @Html.ValidationSummary(true)

	<fieldset id="ProgramEdit">
		@Html.HiddenFor(model => model.Subject.SubjectID)
		@Html.HiddenFor(model => model.Subject.Slug)
		<div class="left">
			<div class="editor-label">
				@Html.LabelFor(model => model.Subject.Title)
			</div>
			<div class="editor-field">
				@Html.TextBoxFor(model => model.Subject.Title, new { @class = "subject-text-field", @maxlength = "50" })
				@Html.ValidationMessageFor(model => model.Subject.Title)
			</div>

			<!-- Subject Merging -->
			<div class="editor-label">
				Modify Subject's Course Prefixes
			</div>
			<div class="editor-field">
				<ul class="subject-merger subject-text-field">
					@{
							IList<string> mergedPrefixes = Model.Subject.CoursePrefixes.Select(s => s.CoursePrefixID).ToList();
							foreach (string prefix in mergedPrefixes)
							{
								<li class="subject-choice">
									<span>@prefix.Trim()</span>
									<input name="PrefixesToMerge" value="@prefix.Trim()" type="hidden" />
									<span class="subject-choice-close ui-icon ui-icon-close"></span>
								</li>
							}
							<li class="subject-new">
								<select id="newSubjectMerge">
									<option>Select</option>
									@foreach (string prefix in Model.AllCoursePrefixes)
									{
										@* Don't output an option if the prefix is already merged *@
										if (!mergedPrefixes.Contains(prefix))
										{
											<option>@prefix</option>
										}
									}
								</select>
							</li>
						}
				</ul>
			</div>

			<div class="editor-label">
				@Html.LabelFor(model => model.Subject.Intro)
			</div>
			<div class="editor-field">
				@Html.TextAreaFor(model => Model.Subject.Intro, new { @class = "subject-text-field", @cols = 60, @rows = 7 })
				@Html.ValidationMessageFor(model => model.Subject.Intro)
			</div>
		</div>

		<div class="right">
			<div class="editor-label">
				@Html.LabelFor(model => model.Department.DepartmentID, "Department")
			</div>
		  <div id="department-field" class="editor-field">
		    @Html.DropDownListFor(model => model.Department.DepartmentID, 
                                       Model.AllDepartments.Select(d => new SelectListItem {Value = d.DepartmentID.ToString(), Text = d.Title}), 
                                       new { @class = "subject-text-field", @maxlength = "50" })
		    @Html.ValidationMessageFor(model => model.Department.DepartmentID)
		  </div>

			<div class="editor-label">
				@Html.LabelFor(model => model.Department.URL, "URL Preview")
			</div>
			<div id="department-url" class="url-preview">
		    @* NOTE: This UI was taken from ClassDetails.cshtml *@
          <div class="generalInfo">
            <h2>Department</h2>
            <ul>
              <li>
                @if (!string.IsNullOrWhiteSpace(Model.Department.URL))
                  {
								    <a href="@Model.Department.URL">
									    @if (!string.IsNullOrWhiteSpace(Model.Department.Title))
                      {
										    @Model.Department.Title
                      }
                      else
                      {
										    @Model.Subject.Title
                      }
								    </a>
                  }
                  else
                  {
                    if (!string.IsNullOrWhiteSpace(Model.Department.Title))
                    {
									    @Model.Department.Title
                    }
                    else
                    {
									    @Model.Subject.Title
                    }
                  }
              </li>
            </ul>
          </div>
			</div>

			<div class="editor-label">
				@Html.LabelFor(model => model.Division.DivisionID, "Division")
			</div>
			<div id="division-field" class="editor-field">
		    @Html.DropDownListFor(model => model.Division.DivisionID, 
                                       Model.AllDivisions.Select(d => new SelectListItem {Value = d.DivisionID.ToString(), Text = d.Title}), 
                                       new { @class = "subject-text-field", @maxlength = "50" })
				@Html.ValidationMessageFor(model => model.Division.DivisionID)
			</div>

			<div class="editor-label">
				@Html.LabelFor(model => model.Division.URL, "URL Preview:")
			</div>
		  <div id="division-url" class="url-preview">
		    @* NOTE: This UI was taken from ClassDetails.cshtml *@
		    <div class="generalInfo">
		      <h2>Division</h2>
		      <ul>
		        <li>
		          @if (!string.IsNullOrWhiteSpace(Model.Division.URL))
		          {
		            <a href="@Model.Division.URL">@Model.Division.Title</a>
		          }
		          else
		          {
		            @Model.Division.Title
		          }
		        </li>
		      </ul>
		    </div>
		  </div>
		</div>
	</fieldset>

	<div id="lastModifiedBy">
		@if (Model.Subject.LastUpdated != null)
		{
			<text>Last modified by </text>@Model.Subject.LastUpdatedBy<text> on </text>@Model.Subject.LastUpdated
		}
	</div>

	<div class="bottom">
		<p>
			<input type="submit" value="Save" /> <a href="@Request.UrlReferrer.ToString()" id="cancelEdit">Cancel</a>
		</p>
	</div>
}

@* TODO: Can we also put this JS in a pageScripts section? *@
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">
  $(function () {
    var deptLinks = new Array();
    @foreach (Department department in Model.AllDepartments)
      {
      <text>
    deptLinks[@(department.DepartmentID)] = "@department.URL";
      </text>
      }

    $("#cancelEdit").click(function (e) {
      e.preventDefault();
      $(".ui-dialog").hide();
      showThrobber();
      window.location.href = $(location).attr('href');
    });

    // Delete subject merge choices
    $('.subject-merger').on('click', '.subject-choice-close', function () {

      // Make sure at least one prefix is always merged
      if ($('.subject-merger').children('.subject-choice').length > 1) {
        subjectToRemove = $(this).parent();

        // Add option back into the drop down list alphabetically
        var subjectToAdd = '<option>' + $(subjectToRemove).text() + '</option>';
        $('#newSubjectMerge').children().each(function () {
          if ($(this).text() != 'Select' && $(this).text() > $(subjectToRemove).text()) {
            $(subjectToAdd).insertBefore($(this));
            return false;
          }
        });

        // Remove the subject from the list of selected
        $(subjectToRemove).remove();
      }
    });

    // Allow user to select subjects to merge
    $('#newSubjectMerge').change(function () {
      var selectedSubject = $(this).find(':selected');

      if ($('#newSubjectMerge').prop('selectedIndex') > 0) {
        var optionToAdd = '<li class="subject-choice"><span>' + selectedSubject.text() + '</span><input name="PrefixesToMerge" value="' + selectedSubject.text() + '" type="hidden"><span class="subject-choice-close ui-icon ui-icon-close"></span></li>';
        $(optionToAdd).insertBefore($(this).parent());
        selectedSubject.remove();
        $('#newSubjectMerge').prop('selectedIndex', 0);
      }
    });
    
    // Update Department URL
    $('#department-field select').change(function() {
      var selected = $(this).find(":selected");
      var id = selected.val();
      console.log("New dept ID = '" + id + "'");
      var title = selected.text();
      console.log("New dept Title = '" + title + "'");

      var preview = $('#department-url ul li');

      var link = deptLinks[id];
      console.log("New dept link = '" + link + "'");

      if (link != null) {
        preview.html('<a href="' + link + '">' + title + '</a>');
      } else {
        preview.text(title);
      }

    });
  });
</script>